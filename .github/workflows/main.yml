name: Assigne API

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres_main:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5
        
    steps:
    - name: Check out the repo
      uses: actions/checkout@v3

    - name: Install Dependencies
      run: |
        pip install -r requirements.txt
        python -m pip install --upgrade pip

    - name: Create local env file for pytest
      run: |
        touch .env
        echo APPLICATION_ENV=${{ secrets.APPLICATION_ENV_LOCAL_TEST }} >> .env
        echo TEST_DATABASE_URL=${{ secrets.TEST_DATABASE_URL }} >> .env
      
    - name: UnitTest with pytest
      run: |
        pytest

    - name: Coverage report
      run: |
        pip install coverage
        coverage run -m pytest
        coverage report
      
    - name: Create env file for Docker Compose
      run: |
        touch .env
        echo DB_USER=${{ secrets.DB_USER }} >> .env
        echo DB_PASS=${{ secrets.DB_PASS }} >> .env
        echo DB_NAME=${{ secrets.DB_NAME }} >> .env
        echo DATABASE_URL=${{ secrets.DATABASE_URL }} >> .env
        echo PGADMIN_EMAIL=${{ secrets.PGADMIN_EMAIL }} >> .env
        echo PGADMIN_PASS=${{ secrets.PGADMIN_PASS }} >> .env
        echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
        echo ALGORITHM=${{ secrets.ALGORITHM  }} >> .env
        echo DB_PORT=${{ secrets.DB_PORT }} >> .env
        echo APPLICATION_ENV=${{ secrets.APPLICATION_ENV }} >> .env

    - name: Set up Docker Compose        
      run: |
          sudo sed -i 's/azure\.//' /etc/apt/sources.list
          sudo apt-get update
          sudo apt-get install -y docker-compose
          sudo docker-compose --version

    - name: Build and run Docker containers
      run: |
          sudo docker-compose up -d --build

    - name: Wait for containers to start
      run: |
          sleep 10

    - name: Run Alembic migration
      run: |
          sudo docker-compose run web alembic upgrade head
